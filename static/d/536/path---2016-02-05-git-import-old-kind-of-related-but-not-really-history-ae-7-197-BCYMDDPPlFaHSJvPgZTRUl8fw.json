{"data":{"site":{"siteMetadata":{"title":"Random Stuff About Stuff","author":"David Kerwick"}},"markdownRemark":{"id":"81a6bef7-149c-5fd5-9b69-185f01e4c208","excerpt":"So some of the projects I’ve work on for a while have had various version control systems used, VSS, SVN and now GIT.  The fun here is not all imports have gone…","html":"<p>So some of the projects I’ve work on for a while have had various version control systems used, VSS, SVN and now GIT.  The fun here is not all imports have gone that well, there has been upgrades that happened in a different project because branches weren’t very good (VSS) or the project has be moved and renamed (SVN) so now that it’s landed in GIT I thought I try tie them togther in one repo, before they were always in the big giant repo.</p>\n<p>The problem is as far as git is concerned they have nothing in common. The VSS is completely seperate and with SVN the SVN to GIT import doesn’t follow renames, so they are seperate too.</p>\n<p>I had tried importing the history as seperate repo’s pull them all into one repo and merging them.  That kind of works but is an unholy mess to look at.</p>\n<p>So I decided to try again.\nProbably not the greatest idea it’s really going to mess with the commit hashes so not for something shared by lots of people.</p>\n<p>So step 1 unmerge the previous merges\nSo at the point just before the merge get the hash of that commit and create a branch from it</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b oldHistory 2708c62125fd29d2e752da349c221e274f2adf33</code></pre></div>\n<p>This branch should now be the old merge.</p>\n<p>Step 2\nSo one option is to use git replace to chain the histories together. Seems like it might work\nBut I think to do it right I need an empty commit at the start which I don’t alway have\n<a href=\"http://stackoverflow.com/questions/645450/insert-a-commit-before-the-root-commit-in-git\">http://stackoverflow.com/questions/645450/insert-a-commit-before-the-root-commit-in-git</a></p>\n<p>Allows you to add a commit at the start, seems to work quite well</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># first you need a new empty branch; let's call it `newroot`</span>\n<span class=\"token function\">git</span> checkout --orphan newroot\n<span class=\"token function\">git</span> <span class=\"token function\">rm</span> -rf <span class=\"token keyword\">.</span>\n\n<span class=\"token function\">git</span> commit --allow-empty -m <span class=\"token string\">'root commit'</span>\n<span class=\"token function\">git</span> rebase --preserve-merges --onto newroot --root master\n<span class=\"token function\">git</span> branch -d newroot</code></pre></div>\n<p>That messes up all the dates though… bummer\nso run</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> filter-branch --env-filter <span class=\"token string\">'GIT_COMMITTER_DATE=<span class=\"token variable\">$GIT_AUTHOR_DATE</span>; export GIT_COMMITTER_DATE'</span></code></pre></div>\n<p>Magic.</p>\n<p>Next up was trying to remove the old merges.\nThought good ole rebase -i would in the easy option and I guess it was in the end but just doing </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase -i d0559ead5df7aea344fae4b1971419a1047916de</code></pre></div>\n<p>gave me all the commits in a linear line, way to many to go through and set manually.</p>\n<p>But turns out all I was missing was —preserve-merges</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase --preserve-merges -i d0559ead5df7aea344fae4b1971419a1047916de</code></pre></div>\n<p>which had the merge listed as one commit so I could easily drop it.</p>\n<p>Then I needed to replace the new blank commit with the end of the old commit, which should also be blank to make sure there aren’t any conflicts</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> replace <span class=\"token string\">\"5b4e4e2\"</span> <span class=\"token string\">\"6577477\"</span></code></pre></div>\n<p>Update\nSo to make that change permanent in the history you can run</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> filter-branch -f --tag-name-filter <span class=\"token function\">cat</span> -- --all</code></pre></div>","frontmatter":{"title":"Git import old kind of related but not really history","date":"December 01, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016-02-05-git-import-old-kind-of-related-but-not-really-history/","previous":{"fields":{"slug":"/2016-02-05-jekyll-stopped-working-then-error-trying-to-install/"},"frontmatter":{"title":"jekyll stopped working then error trying to install"}},"next":{"fields":{"slug":"/2016-02-05-comparing-property-files-on-linux/"},"frontmatter":{"title":"Comparing property files on linux"}}}}