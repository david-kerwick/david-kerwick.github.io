{"data":{"site":{"siteMetadata":{"title":"Random Stuff About Stuff","author":"David Kerwick"}},"markdownRemark":{"id":"84c8b089-1da5-594d-8023-9d51e01b9d6b","excerpt":"So I was looking for a better way of linking in images in my posts. Well I guess the link would be the same it’s just how I find the images in the editor I’m…","html":"<p>So I was looking for a better way of linking in images in my posts. Well I guess the link would be the same it’s just how I find the images in the editor I’m looking to change.</p>\n<p>So I searched for a Sublime plugin on package control and found AutoFileName. Sure seems like it will do the job.</p>\n<p>First off though it doesn’t fire for the Markdown image text and it does if I insert an img tag, the problem there is it’s relative to the current file which is minor annoyance as the Jeykll ‘dev’ structure is different to the complied version.</p>\n<p>So this turns out to be not so bad, main problem here is I’m such a Sublime newb.\nI needed to add the setting for AutoFileName, I first started adding them to the User settings Preferences.sublime-settings as that’s what I did with the Jekyll plugin.  That was the wrong path, what I needed to do was add the file <a href=\"https://github.com/BoundInCode/AutoFileName/blob/a522f3db928809ea03485f8eb97a347806185e02/autofilename.sublime-settings\">autofilename.sublime-settings</a> to my sublime user settings folder.</p>\n<h3>Setting it up for Markdown files</h3>\n<p>In order to allow it to trigger for Markdown files I changed the afn<em>valid</em>scopes to</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">\"afn_valid_scopes\"</span>:<span class=\"token punctuation\">[</span><span class=\"token string\">\"string\"</span>,<span class=\"token string\">\"css\"</span>,<span class=\"token string\">\"sass\"</span>,<span class=\"token string\">\"less\"</span>,<span class=\"token string\">\"scss\"</span>,<span class=\"token string\">\"markdown\"</span><span class=\"token punctuation\">]</span>,</code></pre></div>\n<h3>Setting the ‘base’ directory</h3>\n<p>The base directory proved a little be trickier.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">//By default, AutoFileName uses the disk root <span class=\"token keyword\">for</span> absolute paths.\n//Changing this setting allows <span class=\"token keyword\">for</span> absolute paths on a project level\n//This is useful <span class=\"token keyword\">for</span> web designers and developers <span class=\"token function\">who</span> want to use the\n//root of their site.\n<span class=\"token string\">\"afn_use_project_root\"</span><span class=\"token keyword\">:</span> true,\n\n// Override the project root. Will only work \n// <span class=\"token keyword\">if</span> <span class=\"token string\">\"auto_file_name_use_project_root\"</span> is true.\n<span class=\"token string\">\"afn_proj_root\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"\"</span>,</code></pre></div>\n<p>But for some reason it would only even give the top level directory and not the sub-directories.\nSeems to be a <a href=\"https://github.com/BoundInCode/AutoFileName/issues/39\">bug</a> to get around it set the project root to the actual project directory</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">//By default, AutoFileName uses the disk root <span class=\"token keyword\">for</span> absolute paths.\n//Changing this setting allows <span class=\"token keyword\">for</span> absolute paths on a project level\n//This is useful <span class=\"token keyword\">for</span> web designers and developers <span class=\"token function\">who</span> want to use the\n//root of their site.\n<span class=\"token string\">\"afn_use_project_root\"</span><span class=\"token keyword\">:</span> true,\n\n// Override the project root. Will only work \n// <span class=\"token keyword\">if</span> <span class=\"token string\">\"auto_file_name_use_project_root\"</span> is true.\n<span class=\"token string\">\"afn_proj_root\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"/Users/David/Dropbox/david-kerwick-blog/\"</span>,</code></pre></div>\n<p>If you have multiple sites that could be a pain, but it works for me now… well most of the time</p>\n<h3>Better autocomplete</h3>\n<p>So by most of the time I meant that I had to be pressing ctrl+space after each directory, not the biggest of problems but when I tested it out with the img tag it’s a much better experience you can tab and select all the way to the file which is nice.</p>\n<p>This didn’t work on the markdown links though, this lead me down a dark and deep rabbit hole one where I should have stopped ages ago but I kept thinking it’ll be easy.  And I guess it would be if I spoke Sublime Text and python.</p>\n<p>I thought initially it was going to be a easy config change as the below is mentioned by the plugin</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">\"auto_complete_triggers\"</span><span class=\"token keyword\">:</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n         <span class=\"token string\">\"characters\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"&lt;\"</span>,\n         <span class=\"token string\">\"selector\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"text.html\"</span>\n      <span class=\"token punctuation\">}</span>,\n      <span class=\"token punctuation\">{</span>\n         <span class=\"token string\">\"characters\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"/\"</span>,\n         <span class=\"token string\">\"selector\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"string.quoted.double.html,string.quoted.single.html, source.css\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span></code></pre></div>\n<p>Which sets it up to fire when the / character is hit inside quotes, now it says this is a option you have to put in but it’s doing that at moment.  I couldn’t for the life of my figure out how or where is was doing that.</p>\n<p>I looking into keybindings, setting the above to fire for text.html.markdown (this kind of works, for the first entry)</p>\n<p>I eventually reckon it was the event on<em>selection</em>modified that was doing the magic, here is the snippet from autofilename.py</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">def on_selection_modified<span class=\"token punctuation\">(</span>self,view<span class=\"token punctuation\">)</span>:\n    <span class=\"token keyword\">if</span> not view.window<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:\n        <span class=\"token keyword\">return</span>\n    sel <span class=\"token operator\">=</span> view.sel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> sel.empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> and self.at_path_end<span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span>:\n        <span class=\"token keyword\">if</span> view.substr<span class=\"token punctuation\">(</span>sel.a-1<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> or len<span class=\"token punctuation\">(</span>view.extract_scope<span class=\"token punctuation\">(</span>sel.a<span class=\"token punctuation\">))</span> <span class=\"token operator\">&lt;</span> 3:\n            view.run_command<span class=\"token punctuation\">(</span><span class=\"token string\">'auto_complete'</span>,\n            <span class=\"token punctuation\">{</span><span class=\"token string\">'disable_auto_insert'</span><span class=\"token keyword\">:</span> True,\n            <span class=\"token string\">'next_completion_if_showing'</span><span class=\"token keyword\">:</span> False<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The at<em>path</em>end I think was causing the problem, think it’s looking for css files and the like.</p>\n<p>So my own ‘plugin’ seemed like the solution, plugin seem over kill as it’s a method but sure that’s how the system works.\nSo it turns out it’s extremely easy to create a plugin.\n<code class=\"language-text\">Tools --&gt; New Plugin</code>\nI gives some boilerplate to get you started.</p>\n<p>Anyway here’s what seems to have worked for me, you save it into you your Package/User folder as whateveryouwant.py</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> sublime, sublime_plugin, sys\n\nclass CompleteMarkdownLink<span class=\"token punctuation\">(</span>sublime_plugin.EventListener<span class=\"token punctuation\">)</span>:\n    def on_selection_modified<span class=\"token punctuation\">(</span>self,view<span class=\"token punctuation\">)</span>:\n        sel <span class=\"token operator\">=</span> view.sel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> not view.match_selector<span class=\"token punctuation\">(</span>sel.a, <span class=\"token string\">\"meta.image.inline.markdown\"</span><span class=\"token punctuation\">)</span>:\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">if</span> not view.window<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">if</span> sel.empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:\n            <span class=\"token keyword\">if</span> view.substr<span class=\"token punctuation\">(</span>sel.a-1<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> or len<span class=\"token punctuation\">(</span>view.extract_scope<span class=\"token punctuation\">(</span>sel.a<span class=\"token punctuation\">))</span> <span class=\"token operator\">&lt;</span> 3:\n                view.run_command<span class=\"token punctuation\">(</span><span class=\"token string\">'auto_complete'</span>,\n                <span class=\"token punctuation\">{</span><span class=\"token string\">'disable_auto_insert'</span><span class=\"token keyword\">:</span> True,\n                <span class=\"token string\">'next_completion_if_showing'</span><span class=\"token keyword\">:</span> False<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>So it only fires if the cursor is in a markdown image <code class=\"language-text\">meta.image.inline.markdown</code> and on the / character.</p>\n<p>There’s no way I could write up all the dead ends I followed to get to the above.  I’m now going to have to link about a million images to make the time figuring this out worthwhile, hopefully it will help someone else.</p>","frontmatter":{"title":"Setting up AutoFileName plugin in Sublime for Markdown files","date":"July 29, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2015-07-29-setting-up-autofilename-plugin-in-sublime-for-markdown-files/","previous":{"fields":{"slug":"/2015-07-24-wrapping-code-jeykll-pygments/"},"frontmatter":{"title":"Wrapping code with Jekyll and pygments"}},"next":{"fields":{"slug":"/2015-08-19-eclipse-resource-folders-showing-as-packages/"},"frontmatter":{"title":"Eclipse Resource folders showing as packages"}}}}