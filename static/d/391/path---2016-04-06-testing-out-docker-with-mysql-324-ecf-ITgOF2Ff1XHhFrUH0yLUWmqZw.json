{"data":{"site":{"siteMetadata":{"title":"Random Stuff About Stuff","author":"David Kerwick"}},"markdownRemark":{"id":"cacdda27-eadc-5142-81ff-ee269a8bb4d2","excerpt":"Now things will start to get interesting I imagine.  So far getting apache and php up and running on Docker has been pretty handy.  It’s been easy getting them…","html":"<p>Now things will start to get interesting I imagine.  So far getting apache and php up and running on Docker has been pretty handy.  It’s been easy getting them running and mounting the local source.</p>\n<p>It’s now time to look at the mysql database part, which will need either persisted data over each run or a way of initialising into a known state, I guess it depends on if you are using it for development or testing.</p>\n<p>I’m interested in development for now so a little bit of both I think, I want the database structure in place when I create the image and want the data entered to persist during my development.</p>\n<p>So may as well pull down the official image now</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker pull mysql</code></pre></div>\n<p>To get started lets just create a running server we can connect to and play with so at least we have that bit down and are happy.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -it --rm --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD<span class=\"token operator\">=</span>password mysql</code></pre></div>\n<p>So a slight variant on what’s on the official image page.\nRuns it in interactive mode, tells it to remove the container when it closes, name’s the instance, maps the port for mysql and passes an environment variable for the root password and the image to run.</p>\n<p>Once that’s finished running you should be able to connect to it using mysql workbench and play around.\nIt just has the bare minimum.</p>\n<p>You can stop the server by running</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker stop some-mysql</code></pre></div>\n<p>You will notice if you restart it anything you entered is gone and you are back to the start again.\nTime to solve that.</p>\n<p>So first option remove the —rm so that the image stays.\nYou can then start the image with </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker start some-mysql</code></pre></div>\n<p>If you decide that route you are better off using a command like</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -d --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD<span class=\"token operator\">=</span>password mysql</code></pre></div>\n<p>To start the container initially</p>\n<p>So this has some disadvantages, the data is in the container so if anything happens it your data is gone.</p>\n<p>Next option is to mount a volume.\nSo that’s deceptively simple</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -d --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD<span class=\"token operator\">=</span>password -v /var/lib/mysql mysql</code></pre></div>\n<p>The <code class=\"language-text\">-v /var/lib/mysql</code> mounts a volume in the docker-machine so that it will survive restarts.</p>\n<p>And that’s good enough for me.</p>\n<p>Another option is to mount is locally rather than in the docker-machine.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> docker run -d --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD<span class=\"token operator\">=</span>password -v /local/local/path:/var/lib/mysql mysql</code></pre></div>\n<p>Might be an option if you have different docker machines.</p>","frontmatter":{"title":"Testing out Docker with mysql","date":"April 06, 2016"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016-04-06-testing-out-docker-with-mysql/","previous":{"fields":{"slug":"/2016-04-06-testing-out-docker-with-php/"},"frontmatter":{"title":"Testing out Docker with php"}},"next":{"fields":{"slug":"/2016-04-06-group-by-error-when-updating-mysql/"},"frontmatter":{"title":"Group By error when updating mysql"}}}}