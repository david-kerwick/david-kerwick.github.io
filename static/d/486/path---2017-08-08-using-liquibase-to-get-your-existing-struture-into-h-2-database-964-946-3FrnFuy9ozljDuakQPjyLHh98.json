{"data":{"site":{"siteMetadata":{"title":"Random Stuff About Stuff","author":"David Kerwick"}},"markdownRemark":{"id":"9aed2d09-b0c6-5539-80ad-533e167a55a7","excerpt":"Following on from setting up an in memory H2 database in spring boot for initial development I wanted an easy enough way to set up some existing tables on H…","html":"<p>Following on from setting up an in memory H2 database in spring boot for initial development I wanted an easy enough way to set up some existing tables on H2 start up.  So in the previous post I laid the ground work for that in that I have files that will create the tables and another that will then insert the data to those tables.  And if you are creating new tables the world is your oyster and you can hack away.</p>\n<p>If you have an existing set of tables and it’s more than one or two you will want a way of exporting those and adding them to your <code class=\"language-text\">schema-h2.sql</code> file.  But going from one database to another can be a world of fun, in my case I’m going from Oracle to H2.</p>\n<p>There are a few gotchas with that kind of thing, so it’s easy enough export the create script from Oracle but it will specify varchar2 columns like so</p>\n<p><code class=\"language-text\">SURNAME VARCHAR2(50 BYTE)</code></p>\n<p>or</p>\n<p><code class=\"language-text\">SURNAME VARCHAR2(50 CHAR)</code></p>\n<p>H2 has no idea what you are talking about, it wants it like so</p>\n<p><code class=\"language-text\">SURNAME VARCHAR2(50)</code></p>\n<p>or</p>\n<p><code class=\"language-text\">SURNAME VARCHAR2(50 CHAR)</code></p>\n<p>if you end up trying the <code class=\"language-text\">BYTE</code> variant it will bomb out with an error</p>\n<p><code class=\"language-text\">expected &quot;K, M, G, CHAR,</code></p>\n<p>And there are a few of these. Another way while not perfect is to use liquibase to generate your creation scripts from Oracle but in the H2 syntax.  Sure sounds like a winner.</p>\n<p>Download liquibase and cd into it’s directory.  You will also need to have the oracle jdbc driver or know where it is on your system.  In my case I have one in my tomcat directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">liquibase --driver=oracle.jdbc.OracleDriver --classpath=/Users/David/Downloads/apache-tomcat-7.0.70/lib/ojdbc7.jar --url=&quot;jdbc:oracle:thin:@//192.168.215.27:1521/test.db.ie&quot; --username=user --password=pass --changeLogFile=/Users/David/Downloads/test_db.h2.sql generateChangeLog --includeObjects=&quot;table:MY_TABLE, sequence:MY_SEQ&quot;</code></pre></div>\n<p>Several things going on in this big command lets break it down.</p>\n<ul>\n<li><code class=\"language-text\">liquibase</code> : the main command to run</li>\n<li><code class=\"language-text\">--driver=oracle.jdbc.OracleDriver</code> : the driver to use</li>\n<li><code class=\"language-text\">--classpath=/Users/David/Downloads/apache-tomcat-7.0.70/lib/ojdbc7.jar</code> : the location of the driver</li>\n<li><code class=\"language-text\">--url=&quot;jdbc:oracle:thin:@//192.168.215.27:1521/test.db.ie&quot;</code> : the connect string for the database</li>\n<li><code class=\"language-text\">--username=user</code> : username to use</li>\n<li><code class=\"language-text\">--password=pass</code> : password to use</li>\n<li><code class=\"language-text\">--changeLogFile=/Users/David/Downloads/test_db.h2.sql</code> : file to create, lots of magic here see below</li>\n<li><code class=\"language-text\">generateChangeLog</code> : what you want liquibase to do, create a change log in this case</li>\n<li><code class=\"language-text\">--includeObjects=&quot;table:MY_TABLE, sequence:MY_SEQ&quot;</code> : the list of objects to include, leave this out for everything</li>\n</ul>\n<p><code class=\"language-text\">test_db.h2.sql</code> the extension of the change log file will get you different things.  So in this case the <code class=\"language-text\">.h2</code> tells it we want the output in H2 syntax, you could specify <code class=\"language-text\">.oracle</code> here for example if you wanted oracle syntax. The <code class=\"language-text\">.sql</code> says you want normal sql syntax which you can run from anywhere, <code class=\"language-text\">.xml</code>, <code class=\"language-text\">.yaml</code> gives you a liquibase formatted file where you need to use liquibase to do the loading.</p>\n<p>This will smooth out a good bit of the differences but you will still end with a few.\nHere are some.</p>\n<ul>\n<li>For sequences maxvalue doesn’t seem to be supported</li>\n<li>Beware of uses of functions for defaults, while <code class=\"language-text\">sysdate</code> is supported <code class=\"language-text\">user</code> and <code class=\"language-text\">sys_guid()</code> are not</li>\n<li>Doesn’t seem to be happy with constraints that are set up using an index</li>\n<li>Functional indexes are probably worth skipping, things using <code class=\"language-text\">UPPER</code> / <code class=\"language-text\">TRUNC</code> etc…</li>\n<li>It does an odd thing with number precision it might output it like <code class=\"language-text\">number(*, 0)</code> but needs to be just <code class=\"language-text\">number</code> or <code class=\"language-text\">number(12, 0)</code></li>\n</ul>","frontmatter":{"title":"Using liquibase to get your existing structure into H2 database","date":"August 08, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2017-08-08-using-liquibase-to-get-your-existing-struture-into-h2-database/","previous":{"fields":{"slug":"/2017-02-23-ora-39726-unsupported-add-drop-column-operation-on-compressed-tables/"},"frontmatter":{"title":"ORA-39726: unsupported add/drop column operation on compressed tables"}},"next":{"fields":{"slug":"/2017-08-08-spring-data-and-named-parameters/"},"frontmatter":{"title":"Spring Data and Named Parameters"}}}}