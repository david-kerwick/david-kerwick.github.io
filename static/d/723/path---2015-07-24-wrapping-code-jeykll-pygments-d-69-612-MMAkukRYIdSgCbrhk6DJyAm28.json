{"data":{"site":{"siteMetadata":{"title":"Random Stuff About Stuff","author":"David Kerwick"}},"markdownRemark":{"id":"8af2d686-6831-5298-809c-8b1b41fb56e3","excerpt":"So I’ve been updating my old blogger posts to change them from html to markdown  here    and one of the very first things I did with blogger was to try sort out…","html":"<p>So I’ve been updating my old blogger posts to change them from html to markdown <a href=\"\">here</a> <!--post_url tidying-up-blogger-import--> and one of the very first things I did with blogger was to try sort out <a href=\"../2012-05-03-so-i-decided-to-give-this-blogging\">syntax highlighting</a> and then sort out the <a href=\"../2012-05-03-get-prettify-to-behave-in-firefox\">wrapping of lines</a>.</p>\n<p>So Jekyll has already solved most of these and Pygments does a great job of displaying code easily, when it’s actual code, line wrapping doesn’t work too well and makes it hard to read the code, Pygments sorts this out by scrolling the code.</p>\n<p>But sometimes you want it to wrap because it doesn’t matter, exception traces, long config line for example. Either way I want a way of having it wrap lines or not on a case by case basis.</p>\n<p>So last time I set it globally by changing how <code class=\"language-text\">pre</code> worked by setting it to <code class=\"language-text\">white-space: pre-wrap;</code> I didn’t want to do it globally this time, I want something I can pass to the <code class=\"language-text\">{% highlight%}</code> block that will switch the behaviour.\n\nSo the highlight block says there are only two parameter language and linenos, so I had start down the rabbit hole of other options but in fact there are more options allowed for the highlight tag see <a href=\"https://github.com/jekyll/jekyll/blob/master/lib/jekyll/tags/highlight.rb\">here</a> so the actual options are</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token punctuation\">[</span><span class=\"token symbol\">:startinline</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:startinline</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token symbol\">:hl_linenos</span><span class=\"token punctuation\">,</span>  opts<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:hl_linenos</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token symbol\">:linenos</span><span class=\"token punctuation\">,</span>     opts<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:linenos</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token symbol\">:encoding</span><span class=\"token punctuation\">,</span>    opts<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:encoding</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token symbol\">:cssclass</span><span class=\"token punctuation\">,</span>    opts<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:cssclass</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>cssclass being the one I reckoned I want as it allows you to change the class used for the parent <code class=\"language-text\">&lt;div&gt;</code> Pygments creates, the default is the class highlight.</p>\n<p>First I add a class to main.scss for the no line wrapping</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.nowrap pre</span> <span class=\"token punctuation\">{</span>    \n      <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> pre-wrap<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* css-3 */</span>  \n      <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> -moz-pre-wrap<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Mozilla, since 1999 */</span>  \n      <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> -pre-wrap<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Opera 4-6 */</span>  \n      <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> -o-pre-wrap<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Opera 7 */</span>  \n      <span class=\"token property\">word-wrap</span><span class=\"token punctuation\">:</span> break-word<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Internet Explorer 5.5+ */</span>  \n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>So first attempt looked something like this</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> highlight java cssclass<span class=\"token operator\">=</span>nowrap <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\njava<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>IllegalStateException<span class=\"token operator\">:</span> LifecycleProcessor not initialized <span class=\"token operator\">-</span> call <span class=\"token string\">'refresh'</span> before invoking lifecycle methods via the context   \n<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endhighlight <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>Which replaces <code class=\"language-text\">highlight</code> with <code class=\"language-text\">nowrap</code> in the output and it wraps the line but I’ve lost all formatting, yea I want everything</p>\n<p>Attempt two, I tried to add the two classes to what is produced</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> highlight java cssclass<span class=\"token operator\">=</span><span class=\"token string\">\"hightlight nowrap\"</span> <span class=\"token string\">%}\njava.lang.IllegalStateException: LifecycleProcessor not initialized - call 'refresh' before invoking lifecycle methods via the context   \n{% endhighlight %}</span></code></pre></div>\n<p>But this gives the error</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Liquid Exception: Syntax Error <span class=\"token keyword\">in</span> tag <span class=\"token string\">'highlight'</span> <span class=\"token keyword\">while</span> parsing the following markup: java cssclass<span class=\"token operator\">=</span><span class=\"token string\">\"hightlight nowrap\"</span> Valid syntax: highlight <span class=\"token operator\">&lt;</span>lang<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>linenos<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span></code></pre></div>\n<p>Thought initially it was something like the cssclass not showing up as one of the options but it seems that the quoted list is only for <code class=\"language-text\">hl_linenos</code> which if for the lines to highlight and therefore only takes numbers.</p>\n<p>I spent way too much time trying to figure a way of passing two classes to that option, variables, escaping, try to change it so when it has nowrap it adds hightlight in front, using :before, etc…\nAll in vain.</p>\n<p>Enter SASS, I’ve heard about it but never actually used it.  It always nesting, inheritance and all sorts in css, so since highlight already has everything defined I just need nowrap to have the same, which turn out to be stupidly simple</p>\n<p>I just added the below to main.scss</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.nowrap</span><span class=\"token punctuation\">{</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@extend</span> .highlight<span class=\"token punctuation\">;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So back to the first attempt and it now wraps the lines and highlights the code.  All very simple in the end</p>","frontmatter":{"title":"Wrapping code with Jekyll and pygments","date":"July 24, 2015"}}},"pageContext":{"slug":"/2015-07-24-wrapping-code-jeykll-pygments/","previous":{"fields":{"slug":"/2015-07-24-tidying-up-blogger-import/"},"frontmatter":{"title":"Tidying up Blogger Import"}},"next":{"fields":{"slug":"/2015-07-29-setting-up-autofilename-plugin-in-sublime-for-markdown-files/"},"frontmatter":{"title":"Setting up AutoFileName plugin in Sublime for Markdown files"}}}}