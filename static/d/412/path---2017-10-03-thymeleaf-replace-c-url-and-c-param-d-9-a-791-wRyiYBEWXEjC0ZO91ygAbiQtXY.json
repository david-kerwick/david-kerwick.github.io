{"data":{"site":{"siteMetadata":{"title":"Random Stuff About Stuff","author":"David Kerwick"}},"markdownRemark":{"id":"788ff179-bac5-5734-9914-fd2b62216c05","excerpt":"As part of my conversion from jsp’s to Thymeleaf I came across a block that was creating url’s using   and   for the url parameters. So there is several things…","html":"<p>As part of my conversion from jsp’s to Thymeleaf I came across a block that was creating url’s using <code class=\"language-text\">c:url</code> and <code class=\"language-text\">c:param</code> for the url parameters.</p>\n<p>So there is several things going on in the code</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;fmt:message key=&quot;linkDesc&quot; var=&quot;linkDescVar&quot;/&gt;\n&lt;c:set value=&quot;?${pageContext.request.queryString}&quot; var=&quot;queryString&quot;/&gt;\n&lt;c:set var=&quot;baseUrl&quot; value=&quot;/test/app&quot;/&gt;\n&lt;c:if test=&quot;${queryString == &#39;?&#39;}&quot;&gt;\n    &lt;c:set value=&quot;&quot; var=&quot;queryString&quot;/&gt;\n&lt;/c:if&gt;\n\n&lt;c:set var=&quot;testLink&quot; value=&quot;${pageContext.request.requestURI}${queryString}&quot;/&gt;\n&lt;c:url value=&quot;${baseUrl}&quot; context=&quot;/&quot; var=&quot;baseUrlLink&quot;&gt;\n    &lt;c:param name=&quot;link&quot; value=&quot;${testLink}&quot;&gt;&lt;/c:param&gt;\n    &lt;c:param name=&quot;linkDesc&quot; value=&quot;${linkDescVar}&quot;&gt;&lt;/c:param&gt;\n&lt;/c:url&gt;</code></pre></div>\n<p>So it’s forming a url link to test/app and adding parameters of where it’s currently at including the current query string. So if you go to say <code class=\"language-text\">http://localhost:8080/pub/home?key=value</code> it should form a link that would go to <code class=\"language-text\">http://localhost:8080/test/app?link=home?key=value&amp;linkDesc=testit</code></p>\n<p>The linkDesc comes from the <code class=\"language-text\">messages.properties</code> file</p>\n<p>So things are done this way because of how the jsp taglibs work.  The Thymeleaf solution might not be a line by line replacement. But lets go through it line by line, look at the options in Thymeleaf then see about mushing it all together into something that works.</p>\n<h2><code class=\"language-text\">&lt;fmt:message key=&quot;linkDesc&quot; var=&quot;linkDescVar&quot;/&gt;</code></h2>\n<p>The normal replacement for <code class=\"language-text\">fmt:message</code> would be <code class=\"language-text\">th:text</code> but in this case it’s using it to get a value from the properties file and store it in a variable.  Don’t think that’s a option for <code class=\"language-text\">th:text</code></p>\n<p>So a direct replacement I think would be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div th:with=&quot;linkDescVar=#{linkDesc}&quot;&gt;&lt;/div&gt;</code></pre></div>\n<p>Which sets up the linkDescVar within the context of the div (reckon the within the div bit is something that’s worth noting as the fmt:message var is available to the whole page)</p>\n<p>Another variant would be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div th:with=&quot;linkDescVar=${#messages.msgOrNull(&#39;linkDesc&#39;)}&quot;&gt;&lt;/div&gt;</code></pre></div>\n<p>This uses the <code class=\"language-text\">#messages</code> utility so can be used directly in expressions, might be useful later as there may not be a need to create the variable anymore.</p>\n<h2><code class=\"language-text\">&lt;c:set value=&quot;?${pageContext.request.queryString}&quot; var=&quot;queryString&quot;/&gt;</code></h2>\n<p>The replacement for <code class=\"language-text\">c:set</code> I believe is <code class=\"language-text\">th:with</code> like above. The request object is available in Thymeleaf as <code class=\"language-text\">request</code> so this can be a fairly straight replacement</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div th:with=&quot;queryString=${&#39;?&#39; + #request.queryString}&quot;&gt;&lt;/div&gt;</code></pre></div>\n<p>But there’s some gotcha’s here, while c:set returned blank if <code class=\"language-text\">${pageContext.request.queryString}</code> was blank Thymeleaf returns <code class=\"language-text\">null</code> so in the case where there are no query parameters you get <code class=\"language-text\">?null</code> which is not what we want.</p>\n<p>The code here</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;c:if test=&quot;${queryString == &#39;?&#39;}&quot;&gt;\n    &lt;c:set value=&quot;&quot; var=&quot;queryString&quot;/&gt;\n&lt;/c:if&gt;</code></pre></div>\n<p>Handled the case of no query parameters by checking for just the <code class=\"language-text\">?</code> and replacing it with blank.</p>\n<p>This needs to be handled in the <code class=\"language-text\">th:with</code> in Thymeleaf I believe so this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div th:with=&quot;queryString=${#request.queryString == null ? &#39;&#39; : &#39;?&#39; + #request.queryString}&quot;&gt;&lt;/div&gt;</code></pre></div>\n<p>an awful lot of question marks but this is using (if) ? (then) : (else) in the expression. If it’s null set queryString to blank else set it you a <code class=\"language-text\">?</code> and concat on the query string.</p>\n<h2><code class=\"language-text\">&lt;c:set var=&quot;testLink&quot; value=&quot;${pageContext.request.requestURI}${queryString}&quot;/&gt;</code></h2>\n<p>Our friend <code class=\"language-text\">th:with</code> again for this job, which is just concatenating two values.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div th:with=&quot;testLink=${#request.requestURI + queryString}&quot;&gt;&lt;/div&gt;</code></pre></div>\n<h2>Last part</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;c:url value=&quot;${baseUrl}&quot; context=&quot;/&quot; var=&quot;baseUrlLink&quot;&gt;\n    &lt;c:param name=&quot;link&quot; value=&quot;${testLink}&quot;&gt;&lt;/c:param&gt;\n    &lt;c:param name=&quot;linkDesc&quot; value=&quot;${linkDescVar}&quot;&gt;&lt;/c:param&gt;\n&lt;/c:url&gt;</code></pre></div>\n<p>Yea <code class=\"language-text\">th:with</code> again, the go to variable assignment wizard.</p>\n<p>So some Thymeleaf url magic beans to cover first, for forming url’s use <code class=\"language-text\">@{...}</code> which handles alot of the url dark arts, context root etc… within that to add parameters you use <code class=\"language-text\">()</code> so <code class=\"language-text\">@{/test/app(key=value)}</code> to get the context to be server root like <code class=\"language-text\">context=&quot;/&quot;</code> you use a tilde <code class=\"language-text\">~</code> at the start of the url.</p>\n<p>With that in mind</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div th:with=&quot;baseUrlLink=@{~/test/app(backLink=${testLink},linkDesc=${linkDescVar})}&quot;&gt;&lt;/div&gt;</code></pre></div>\n<p>Creates the link and assigns it to the baseUrlLink variable and uses the two other variables set up earlier <code class=\"language-text\">testLink</code> and <code class=\"language-text\">linkDescVar</code></p>\n<p>This gives an overall block like this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div th:with=&quot;linkDescVar=#{linkDesc}&quot;&gt;\n    &lt;div th:with=&quot;queryString=${#request.queryString == null ? &#39;&#39; : &#39;?&#39; + #request.queryString}&quot;&gt;\n        &lt;div th:with=&quot;testLink=${#request.requestURI + queryString}&quot;&gt;\n            &lt;div th:with=&quot;baseUrlLink=@{/test/app(backLink=${testLink},linkDesc=${linkDescVar})}&quot;&gt;\n                &lt;a th:href=&quot;${baseUrlLink}&quot;&gt;example of link&lt;/a&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre></div>\n<p>So seeing as these are all expressions you can collapse them down as much as you like for example you could move the linkDescVar inline.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div th:with=&quot;queryString=${#request.queryString == null ? &#39;&#39; : &#39;?&#39; + #request.queryString}&quot;&gt;\n    &lt;div th:with=&quot;testLink=${#request.requestURI + queryString}&quot;&gt;\n        &lt;div th:with=&quot;baseUrlLink=@{/test/app(backLink=${testLink},linkDesc=${#messages.msgOrNull(&#39;linkDesc&#39;)})}&quot;&gt;\n            &lt;a th:href=&quot;${baseUrlLink}&quot;&gt;example of link&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre></div>\n<p>In theory you can get the whole thing on one line if you wanted, that would be a complex looking line but you might prefer it that way.</p>","frontmatter":{"title":"Thymeleaf - replace c:url and c:param","date":"October 03, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2017-10-03-thymeleaf-replace-c-url-and-c-param/","previous":{"fields":{"slug":"/2017-10-03-intellij-clean-up-jpa-generated-models-for-use-with-lombok/"},"frontmatter":{"title":"IntelliJ clean up JPA generated models for use with Lombok"}},"next":{"fields":{"slug":"/2017-10-04-sonarqube-on-docker-for-mac-configuring-a-proxy/"},"frontmatter":{"title":"Sonarqube on Docker for Mac configuring a proxy "}}}}