{"data":{"site":{"siteMetadata":{"title":"Random Stuff About Stuff","author":"David Kerwick"}},"markdownRemark":{"id":"a3b6c0dd-684e-5bd0-988f-a40ee55e7a5f","excerpt":"I’m looking at an old PHP project which uses codeigniter.  The repo is huge, over 100mb or something like that.  Which seemed odd when I first looked at it…","html":"<p>I’m looking at an old PHP project which uses codeigniter.  The repo is huge, over 100mb or something like that.  Which seemed odd when I first looked at it.  Turns out all the dependencies are checked in as there’s nothing doing dependency management.  So very strange when coming from the Java / Maven world.</p>\n<p>So Composer seems to be the package / dependency manager in PHP land.  Could be wrong but that’s what I could find on a quick search, I find not having a ‘build’ tool very strange.</p>\n<p>So what I hope to do is get composer up and running and remove some of the external dependencies from the repo.  I think Codeigniter is too ancient and can’t be used as a package so I’ll leave it there.  Think version 3 might allow such a thing.</p>\n<h1>Installing Composer</h1>\n<p>There are options on the site but as you may know I’m a fan of homebrew for this kind of thing\nso run</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> composer</code></pre></div>\n<p>You should be good to go then.\nThey suggest a quick and simple test i.e.\ncreate a <code class=\"language-text\">composer.json</code> file in a temp directory add the following to it</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"require\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"monolog/monolog\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"1.0.*\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then run </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">composer <span class=\"token function\">install</span></code></pre></div>\n<p>It should pull down monolog into a vendor directory.</p>\n<h1>Finding the packages</h1>\n<p>Now that composer is installed I need to find the packages used.\nYou can do that using <a href=\"https://packagist.org/\">https://packagist.org/</a> which makes it quite simple to find the package based on the folder name on the legacy project.  Finding the correct version proved to be more difficult. Search around for changelog or something like that, failing that try find copyright year and have a guess or it’s easy to download different versions so have a go into a temp directory and comparing them. In fact this is the hardest part of the whole process, finding the exact version can be a bit of a pain so perhaps some upgrades are in order.</p>\n<h1>Loading the packages.</h1>\n<p>This seems easy enough as well. Composer creates an autoloading file so I think all you need to do is get Codeigniter to load that.</p>\n<p>At the top of your <code class=\"language-text\">index.php</code> file add</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">include_once <span class=\"token string\">'./vendor/autoload.php'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you had been manually loading the libraries based on a path you may now need to update those files to remove the manual load.</p>\n<p>For example if you have a MY<em>Class in the libraries folder you might have something like the below in a MY</em>excel file</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">require_once <span class=\"token constant\">APPPATH</span><span class=\"token punctuation\">.</span><span class=\"token string\">\"/third_party/PHPExcel.php\"</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>When you add PHPExcel to composer and use autoload you can remove the above line and <code class=\"language-text\">PHPExcel.php</code> from <code class=\"language-text\">third_party</code></p>\n<h1>Conclusion</h1>\n<p>So seems straight forward enough and should free up the repo and get closer to only having application code there.  The versions is the ‘big’ problem but a bit of investigation and testing should sort that out. There’s a little bit of manually changes to update how old things were loaded if they weren’t using autoload and I guess the impact of having everything on autoload should be looked at as well but so far so good. Guess if that’s a problem you can always turn off autoload and load them as needed from the vendor directory.</p>","frontmatter":{"title":"Getting PHP Composer working for a legacy project","date":"April 11, 2016"}}},"pageContext":{"slug":"/2016-04-11-getting-php-composer-working-for-a-legacy-project/","previous":{"fields":{"slug":"/2016-04-07-phpstorm-and-codeigniter/"},"frontmatter":{"title":"PHPStorm and Codeigniter"}},"next":{"fields":{"slug":"/2016-05-04-using-bower-to-pull-in-external-dependencies/"},"frontmatter":{"title":"Using Bower to pull in external dependencies"}}}}