{"data":{"site":{"siteMetadata":{"title":"Random Stuff About Stuff","author":"David Kerwick"}},"markdownRemark":{"id":"bd8050ce-d238-5f84-be28-09609b9457ea","excerpt":"Spring Boot makes it fairly painless to spin up a H2 database. So I decided to try it out on my next project as a way to develop locally and have seeded the…","html":"<p>Spring Boot makes it fairly painless to spin up a H2 database. So I decided to try it out on my next project as a way to develop locally and have seeded the test scripts with relevant data.</p>\n<p>First off include H2 in the dependencies of your pom</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;dependency&gt;\n    &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n    &lt;artifactId&gt;h2&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre></div>\n<p>And well you are just about done! Which is impressive.</p>\n<p>You can configure things in your <code class=\"language-text\">application.properties</code> such as</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.h2.console.enabled=true\nspring.datasource.url=jdbc:h2:mem:testdb;MODE=Oracle;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\nspring.datasource.platform=h2\nspring.jpa.hibernate.ddl-auto=none</code></pre></div>\n<p><code class=\"language-text\">spring.h2.console.enabled=true</code> enables the H2 console, which you can get to on <code class=\"language-text\">http://localhost:8080/h2-console</code> after startup. It allows you to view the tables, data, run sql etc… Handy for playing around with things while your developing.</p>\n<p><code class=\"language-text\">spring.datasource.url=jdbc:h2:mem:testdb;MODE=Oracle;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</code> sets up the in memory H2 database. You can also pass along a few parameters, so in this case it’s set to Oracle mode as Oracle will be the real database that will be used. <code class=\"language-text\">DB_CLOSE_ON_EXIT</code> is recommended by Spring Boot so that it handles the closing of the db when it’s ready. <code class=\"language-text\">DB_CLOSE_DELAY</code> was another recommendation I found since it’s in memory there’s no need to delay the shutdown.</p>\n<p><code class=\"language-text\">spring.datasource.platform=h2</code> set the platform for use during database initialisation, details <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html#howto-initialize-a-database-using-spring-jdbc\">here</a> which sets the schema/data load file to <code class=\"language-text\">schema-h2.sql</code> and <code class=\"language-text\">data-h2.sql</code></p>\n<p><code class=\"language-text\">spring.jpa.hibernate.ddl-auto=none</code> stop jpa from reinitialising your database.  I’m going to be using the scripts.</p>\n<p>Then create <code class=\"language-text\">schema-h2.sql</code> and add your creation scripts and create <code class=\"language-text\">data-h2.sql</code> and add your test data in your resources folder.</p>\n<p>These will then run on startup and build your H2 database. How to seed those from an existing database is another post.</p>","frontmatter":{"title":"Setting up H2 with Spring Boot","date":"February 23, 2017"}}},"pageContext":{"slug":"/2017-02-23-setting-up-h2-with-spring-boot/","previous":{"fields":{"slug":"/2017-02-21-intellij-customise-jpa-generation/"},"frontmatter":{"title":"Intellij customise JPA generation"}},"next":{"fields":{"slug":"/2017-02-23-ora-39726-unsupported-add-drop-column-operation-on-compressed-tables/"},"frontmatter":{"title":"ORA-39726: unsupported add/drop column operation on compressed tables"}}}}